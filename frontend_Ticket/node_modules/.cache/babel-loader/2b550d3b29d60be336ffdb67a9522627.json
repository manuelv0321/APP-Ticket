{"ast":null,"code":"import _toConsumableArray from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\src\\\\componentes\\\\pedidos\\\\NuevoPedido.js\";\nimport React, { useState, useEffect, Fragment } from 'react';\nimport clienteAxios from '../../config/axios';\nimport FormBuscarProducto from './FormBuscarProducto';\nimport FormCantidadProducto from './FormCantidadProducto';\nimport Swal from 'sweetalert2';\nimport { withRouter } from 'react-router-dom';\n\nfunction NuevoPedido(props) {\n  // extraer ID de cliente\n  var id = props.match.params.id; // state\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      cliente = _useState2[0],\n      guardarCliente = _useState2[1];\n\n  var _useState3 = useState(''),\n      _useState4 = _slicedToArray(_useState3, 2),\n      busqueda = _useState4[0],\n      guardarBusqueda = _useState4[1];\n\n  var _useState5 = useState([]),\n      _useState6 = _slicedToArray(_useState5, 2),\n      productos = _useState6[0],\n      guardarProductos = _useState6[1];\n\n  var _useState7 = useState(0),\n      _useState8 = _slicedToArray(_useState7, 2),\n      total = _useState8[0],\n      guardarTotal = _useState8[1];\n\n  useEffect(function () {\n    // obtener el cliente\n    var consultarAPI =\n    /*#__PURE__*/\n    function () {\n      var _ref = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var resultado;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return clienteAxios.get(\"/clientes/\".concat(id));\n\n              case 2:\n                resultado = _context.sent;\n                guardarCliente(resultado.data);\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function consultarAPI() {\n        return _ref.apply(this, arguments);\n      };\n    }(); // llamar a la api\n\n\n    consultarAPI(); // actualizar el total a pagar\n\n    actualizarTotal();\n  }, [productos]);\n\n  var buscarProducto =\n  /*#__PURE__*/\n  function () {\n    var _ref2 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee2(e) {\n      var resultadoBusqueda, productoResultado;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              e.preventDefault(); // obtener los productos de la busqueda\n\n              _context2.next = 3;\n              return clienteAxios.post(\"/productos/busqueda/\".concat(busqueda));\n\n            case 3:\n              resultadoBusqueda = _context2.sent;\n\n              // si no hay resultados una alerta, contrario agregarlo al state\n              if (resultadoBusqueda.data[0]) {\n                productoResultado = resultadoBusqueda.data[0]; // agregar la llave \"producto\" (copia de id)\n\n                productoResultado.producto = resultadoBusqueda.data[0]._id;\n                productoResultado.cantidad = 0; // ponerlo en el state\n\n                guardarProductos([].concat(_toConsumableArray(productos), [productoResultado]));\n              } else {\n                // no hay resultados\n                Swal.fire({\n                  type: 'error',\n                  title: 'No Resultados',\n                  text: 'No hay resultados'\n                });\n              }\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function buscarProducto(_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }(); // almacenar una busqueda en el state\n\n\n  var leerDatosBusqueda = function leerDatosBusqueda(e) {\n    guardarBusqueda(e.target.value);\n  }; // actualizar la cantidad de productos\n\n\n  var restarProductos = function restarProductos(i) {\n    // copiar el arreglo original de productos\n    var todosProductos = _toConsumableArray(productos); // validar si esta en 0 no puede ir mas alla\n\n\n    if (todosProductos[i].cantidad === 0) return; // decremento\n\n    todosProductos[i].cantidad--; // almacenarlo en el state\n\n    guardarProductos(todosProductos);\n  };\n\n  var aumentarProductos = function aumentarProductos(i) {\n    // copiar el arreglo para no mutar el original\n    var todosProductos = _toConsumableArray(productos); // incremento\n\n\n    todosProductos[i].cantidad++; // almacenarlo en el state\n\n    guardarProductos(todosProductos);\n  }; // Elimina Un producto del state \n\n\n  var eliminarProductoPedido = function eliminarProductoPedido(id) {\n    var todosProductos = productos.filter(function (producto) {\n      return producto.producto !== id;\n    });\n    guardarProductos(todosProductos);\n  }; // Actualizar el total a pagar\n\n\n  var actualizarTotal = function actualizarTotal() {\n    // si el arreglo de productos es igual 0: el total es 0\n    if (productos.length === 0) {\n      guardarTotal(0);\n      return;\n    } // calcular el nuevo total\n\n\n    var nuevoTotal = 0; // recorrer todos los productos, sus cantidades y precios\n\n    productos.map(function (producto) {\n      return nuevoTotal += producto.cantidad * producto.precio;\n    }); // almacenar el Total\n\n    guardarTotal(nuevoTotal);\n  }; // Almacena el pedido en la BD\n\n\n  var realizarPedido =\n  /*#__PURE__*/\n  function () {\n    var _ref3 = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee3(e) {\n      var id, pedido, resultado;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              e.preventDefault(); // extraer el ID\n\n              id = props.match.params.id; // construir el objeto\n\n              pedido = {\n                \"cliente\": id,\n                \"pedido\": productos,\n                \"total\": total // almacenarlo en la BD\n\n              };\n              _context3.next = 5;\n              return clienteAxios.post(\"/pedidos/nuevo/\".concat(id), pedido);\n\n            case 5:\n              resultado = _context3.sent;\n\n              // leer resultado\n              if (resultado.status === 200) {\n                // alerta de todo bien\n                Swal.fire({\n                  type: 'success',\n                  title: 'Correcto',\n                  text: resultado.data.mensaje\n                });\n              } else {\n                // alerta de error\n                Swal.fire({\n                  type: 'error',\n                  title: 'Hubo un Error',\n                  text: 'Vuelva a intentarlo'\n                });\n              } // redireccionar\n\n\n              props.history.push('/pedidos');\n\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function realizarPedido(_x2) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163\n    },\n    __self: this\n  }, \"Nuevo Pedido\"), React.createElement(\"div\", {\n    className: \"ficha-cliente\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 165\n    },\n    __self: this\n  }, React.createElement(\"h3\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }, \"Datos de Cliente\"), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167\n    },\n    __self: this\n  }, \"Nombre: \", cliente.nombre, \" \", cliente.apellido), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168\n    },\n    __self: this\n  }, \"Tel\\xE9fono: \", cliente.telefono)), React.createElement(FormBuscarProducto, {\n    buscarProducto: buscarProducto,\n    leerDatosBusqueda: leerDatosBusqueda,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 171\n    },\n    __self: this\n  }), React.createElement(\"ul\", {\n    className: \"resumen\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 176\n    },\n    __self: this\n  }, productos.map(function (producto, index) {\n    return React.createElement(FormCantidadProducto, {\n      key: producto.producto,\n      producto: producto,\n      restarProductos: restarProductos,\n      aumentarProductos: aumentarProductos,\n      eliminarProductoPedido: eliminarProductoPedido,\n      index: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    });\n  })), React.createElement(\"p\", {\n    className: \"total\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"Total a Pagar: \", React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191\n    },\n    __self: this\n  }, \"$ \", total), \" \"), total > 0 ? React.createElement(\"form\", {\n    onSubmit: realizarPedido,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-verde btn-block\",\n    value: \"Realizar Pedido\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 198\n    },\n    __self: this\n  })) : null);\n}\n\nexport default withRouter(NuevoPedido);","map":{"version":3,"sources":["C:\\laragon\\www\\frontend_Ticket\\src\\componentes\\pedidos\\NuevoPedido.js"],"names":["React","useState","useEffect","Fragment","clienteAxios","FormBuscarProducto","FormCantidadProducto","Swal","withRouter","NuevoPedido","props","id","match","params","cliente","guardarCliente","busqueda","guardarBusqueda","productos","guardarProductos","total","guardarTotal","consultarAPI","get","resultado","data","actualizarTotal","buscarProducto","e","preventDefault","post","resultadoBusqueda","productoResultado","producto","_id","cantidad","fire","type","title","text","leerDatosBusqueda","target","value","restarProductos","i","todosProductos","aumentarProductos","eliminarProductoPedido","filter","length","nuevoTotal","map","precio","realizarPedido","pedido","status","mensaje","history","push","nombre","apellido","telefono","index"],"mappings":"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","sourcesContent":["import React, {useState, useEffect, Fragment} from 'react';\nimport clienteAxios from '../../config/axios';\n\nimport FormBuscarProducto from './FormBuscarProducto';\nimport FormCantidadProducto from './FormCantidadProducto';\nimport Swal from 'sweetalert2';\nimport { withRouter } from 'react-router-dom';\n\nfunction NuevoPedido(props) {\n\n    // extraer ID de cliente\n    const { id } = props.match.params;\n\n    // state\n    const [cliente, guardarCliente] = useState({});\n    const [busqueda, guardarBusqueda] = useState('');\n    const [productos, guardarProductos] = useState([]);\n    const [total, guardarTotal] = useState(0);\n\n    useEffect(() => {\n\n        // obtener el cliente\n        const consultarAPI = async () => {\n            // consultar el cliente actual\n            const resultado = await clienteAxios.get(`/clientes/${id}`);\n            guardarCliente(resultado.data);\n        }\n\n        // llamar a la api\n        consultarAPI();\n        \n        // actualizar el total a pagar\n        actualizarTotal();\n\n    }, [productos]);\n\n    const buscarProducto = async e => {\n        e.preventDefault();\n\n        // obtener los productos de la busqueda\n        const resultadoBusqueda = await clienteAxios.post(`/productos/busqueda/${busqueda}`);\n\n        // si no hay resultados una alerta, contrario agregarlo al state\n        if(resultadoBusqueda.data[0]) {\n\n            let productoResultado = resultadoBusqueda.data[0];\n            // agregar la llave \"producto\" (copia de id)\n            productoResultado.producto = resultadoBusqueda.data[0]._id;\n            productoResultado.cantidad = 0;\n\n            // ponerlo en el state\n            guardarProductos([...productos, productoResultado]);\n\n        } else {\n            // no hay resultados\n            Swal.fire({\n                type: 'error',\n                title: 'No Resultados',\n                text: 'No hay resultados'\n            })\n        }\n    }\n\n    // almacenar una busqueda en el state\n    const leerDatosBusqueda = e => {\n        guardarBusqueda( e.target.value );\n    }\n\n    // actualizar la cantidad de productos\n    const restarProductos = i => {\n        // copiar el arreglo original de productos\n        const todosProductos = [...productos];\n\n        // validar si esta en 0 no puede ir mas alla\n        if(todosProductos[i].cantidad === 0) return;\n\n        // decremento\n        todosProductos[i].cantidad--;\n\n        // almacenarlo en el state\n        guardarProductos(todosProductos);\n\n    }\n\n    const aumentarProductos = i => {\n       // copiar el arreglo para no mutar el original\n       const todosProductos = [...productos];\n\n       // incremento\n       todosProductos[i].cantidad++;\n\n       // almacenarlo en el state\n       guardarProductos(todosProductos);\n    }\n\n    // Elimina Un producto del state \n    const eliminarProductoPedido = id => {\n        const todosProductos = productos.filter(producto => producto.producto !== id );\n\n        guardarProductos(todosProductos)\n    }\n\n    // Actualizar el total a pagar\n    const actualizarTotal = () => {\n        // si el arreglo de productos es igual 0: el total es 0\n        if(productos.length === 0) {\n            guardarTotal(0);\n            return;\n        }\n\n        // calcular el nuevo total\n        let nuevoTotal = 0;\n\n        // recorrer todos los productos, sus cantidades y precios\n        productos.map(producto => nuevoTotal += (producto.cantidad * producto.precio)  );\n\n        // almacenar el Total\n        guardarTotal(nuevoTotal);\n    }\n\n    // Almacena el pedido en la BD\n    const realizarPedido = async e => {\n        e.preventDefault();\n\n        // extraer el ID\n        const { id } = props.match.params;\n\n        // construir el objeto\n        const pedido = {\n            \"cliente\" : id, \n            \"pedido\" : productos, \n            \"total\" : total\n        }\n\n        // almacenarlo en la BD\n        const resultado = await clienteAxios.post(`/pedidos/nuevo/${id}`, pedido);\n\n        // leer resultado\n        if(resultado.status === 200) {\n            // alerta de todo bien\n            Swal.fire({\n                type: 'success',\n                title: 'Correcto',\n                text: resultado.data.mensaje\n            })\n        } else {\n            // alerta de error\n            Swal.fire({\n                type: 'error',\n                title: 'Hubo un Error',\n                text: 'Vuelva a intentarlo'\n            })\n        }\n\n        // redireccionar\n        props.history.push('/pedidos');\n\n    }\n\n\n    return(\n        <Fragment>\n            <h2>Nuevo Pedido</h2>\n\n                <div className=\"ficha-cliente\">\n                    <h3>Datos de Cliente</h3>\n                    <p>Nombre: {cliente.nombre} {cliente.apellido}</p>\n                    <p>Teléfono: {cliente.telefono}</p>\n                </div>\n\n                <FormBuscarProducto \n                    buscarProducto={buscarProducto}\n                    leerDatosBusqueda={leerDatosBusqueda}\n                />\n\n                <ul className=\"resumen\">\n                    {productos.map((producto, index) => (\n                        <FormCantidadProducto \n                            key={producto.producto}\n                            producto={producto}\n                            restarProductos={restarProductos}\n                            aumentarProductos={aumentarProductos}\n                            eliminarProductoPedido={eliminarProductoPedido}\n                            index={index}\n                        />\n                    ))}\n\n                </ul>\n\n                \n                <p className=\"total\">Total a Pagar: <span>$ {total}</span> </p>\n\n\n                { total > 0 ? (\n                    <form\n                        onSubmit={realizarPedido}\n                    >\n                        <input type=\"submit\"\n                              className=\"btn btn-verde btn-block\"\n                              value=\"Realizar Pedido\" />\n                    </form>\n                ) : null }\n        </Fragment>\n    )\n}\nexport default  withRouter(NuevoPedido);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _regeneratorRuntime from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\src\\\\componentes\\\\clientes\\\\EditarCliente.js\";\nimport React, { Fragment, useState, useEffect } from 'react';\nimport Swal from 'sweetalert2';\nimport { withRouter } from 'react-router-dom';\nimport clienteAxios from '../../config/axios';\n\nfunction EditarCliente(props) {\n  // obtener el ID\n  var id = props.match.params.id; // cliente = state, datosCliente = funcion para guardar el state\n\n  var _useState = useState({\n    nombre: '',\n    apellido: '',\n    empresa: '',\n    email: '',\n    telefono: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cliente = _useState2[0],\n      datosCliente = _useState2[1]; // Query a la API\n\n\n  var consultarAPI =\n  /*#__PURE__*/\n  function () {\n    var _ref = _asyncToGenerator(\n    /*#__PURE__*/\n    _regeneratorRuntime.mark(function _callee() {\n      var clienteConsulta;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return clienteAxios.get(\"/clientes/\".concat(id));\n\n            case 2:\n              clienteConsulta = _context.sent;\n              // colocar en el state\n              datosCliente(clienteConsulta.data);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function consultarAPI() {\n      return _ref.apply(this, arguments);\n    };\n  }(); // useEffect, cuando el componente carga\n\n\n  useEffect(function () {\n    consultarAPI();\n  }, []); // leer los datos del formulario\n\n  var actualizarState = function actualizarState(e) {\n    // Almacenar lo que el usuario escribe en el state\n    datosCliente(_objectSpread({}, cliente, _defineProperty({}, e.target.name, e.target.value)));\n  }; // Envia una petición por axios para actualizar el cliente\n\n\n  var actualizarCliente = function actualizarCliente(e) {\n    e.preventDefault(); // enviar petición por axios\n\n    clienteAxios.put(\"/clientes/\".concat(cliente._id), cliente).then(function (res) {\n      // validar si hay errores de mongo \n      if (res.data.code === 11000) {\n        Swal.fire({\n          type: 'error',\n          title: 'Hubo un error',\n          text: 'Ese cliente ya esta registrado'\n        });\n      } else {\n        Swal.fire('Correcto', 'Se actualizó Correctamente', 'success');\n      } // redireccionar\n\n\n      props.history.push('/');\n    });\n  }; // Validar el formulario\n\n\n  var validarCliente = function validarCliente() {\n    // Destructuring\n    var nombre = cliente.nombre,\n        apellido = cliente.apellido,\n        email = cliente.email,\n        empresa = cliente.empresa,\n        telefono = cliente.telefono; // revisar que las propiedades del state tengan contenido\n\n    var valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length; // return true o false\n\n    return valido;\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Editar Cliente\"), React.createElement(\"form\", {\n    onSubmit: actualizarCliente,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  }, \"Llena todos los campos\"), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 92\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 93\n    },\n    __self: this\n  }, \"Nombre:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Nombre Cliente\",\n    name: \"nombre\",\n    onChange: actualizarState,\n    value: cliente.nombre,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 94\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, \"Apellido:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Apellido Cliente\",\n    name: \"apellido\",\n    onChange: actualizarState,\n    value: cliente.apellido,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 113\n    },\n    __self: this\n  }, \"Empresa:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Empresa Cliente\",\n    name: \"empresa\",\n    onChange: actualizarState,\n    value: cliente.empresa,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, \"Email:\"), React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"Email Cliente\",\n    name: \"email\",\n    onChange: actualizarState,\n    value: cliente.email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }, \"Tel\\xE9fono:\"), React.createElement(\"input\", {\n    type: \"tel\",\n    placeholder: \"Tel\\xE9fono Cliente\",\n    name: \"telefono\",\n    onChange: actualizarState,\n    value: cliente.telefono,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"enviar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 142\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-azul\",\n    value: \"Guardar Cambios\",\n    disabled: validarCliente(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }))));\n} // HOC, es una función que toma un componente y retorna un nuevo componente\n\n\nexport default withRouter(EditarCliente);","map":{"version":3,"sources":["C:\\laragon\\www\\restapis_crm_frontend-master\\src\\componentes\\clientes\\EditarCliente.js"],"names":["React","Fragment","useState","useEffect","Swal","withRouter","clienteAxios","EditarCliente","props","id","match","params","nombre","apellido","empresa","email","telefono","cliente","datosCliente","consultarAPI","get","clienteConsulta","data","actualizarState","e","target","name","value","actualizarCliente","preventDefault","put","_id","then","res","code","fire","type","title","text","history","push","validarCliente","valido","length"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useEffect} from 'react';\nimport Swal from 'sweetalert2';\nimport { withRouter } from 'react-router-dom'; \nimport clienteAxios from '../../config/axios';\n\n\n\nfunction EditarCliente(props){\n\n    // obtener el ID\n    const { id } = props.match.params;\n\n    // cliente = state, datosCliente = funcion para guardar el state\n    const[cliente, datosCliente] = useState({\n        nombre: '',\n        apellido: '',\n        empresa : '',\n        email: '',\n        telefono :''\n    });\n\n    // Query a la API\n    const consultarAPI = async () => {\n        const clienteConsulta = await clienteAxios.get(`/clientes/${id}`);\n\n       // colocar en el state\n       datosCliente(clienteConsulta.data);\n    }\n\n    // useEffect, cuando el componente carga\n    useEffect( () => {\n        consultarAPI();\n    }, []);\n\n    // leer los datos del formulario\n    const actualizarState = e => {\n        // Almacenar lo que el usuario escribe en el state\n        datosCliente({\n            // obtener una copia del state actual\n            ...cliente, \n            [e.target.name] : e.target.value\n        })\n    }\n\n    // Envia una petición por axios para actualizar el cliente\n    const actualizarCliente = e => {\n        e.preventDefault();\n\n        // enviar petición por axios\n        clienteAxios.put(`/clientes/${cliente._id}`, cliente) \n            .then(res => {\n                // validar si hay errores de mongo \n                if(res.data.code === 11000) {\n                    Swal.fire({\n                        type: 'error',\n                        title: 'Hubo un error',\n                        text: 'Ese cliente ya esta registrado'\n                    })\n                } else {\n                    Swal.fire(\n                        'Correcto',\n                        'Se actualizó Correctamente',\n                        'success'\n                    )\n                }\n\n                // redireccionar\n                props.history.push('/');\n            })\n    }\n\n    // Validar el formulario\n    const validarCliente = () => {\n        // Destructuring\n        const { nombre, apellido, email, empresa, telefono} = cliente;\n\n        // revisar que las propiedades del state tengan contenido\n        let valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length;\n\n        // return true o false\n        return valido;\n    }\n\n    return (\n        <Fragment>\n            <h2>Editar Cliente</h2>\n            \n            <form\n                onSubmit={actualizarCliente}\n            >\n                <legend>Llena todos los campos</legend>\n                <div className=\"campo\">\n                    <label>Nombre:</label>\n                    <input  type=\"text\" \n                            placeholder=\"Nombre Cliente\" \n                            name=\"nombre\"\n                            onChange={actualizarState}\n                            value={cliente.nombre}\n                    />\n                </div>\n\n                <div className=\"campo\">\n                    <label>Apellido:</label>\n                    <input type=\"text\" \n                          placeholder=\"Apellido Cliente\" \n                          name=\"apellido\" \n                          onChange={actualizarState}\n                          value={cliente.apellido}\n                    />\n                </div>\n            \n                <div className=\"campo\">\n                    <label>Empresa:</label>\n                    <input type=\"text\" \n                          placeholder=\"Empresa Cliente\" \n                          name=\"empresa\" \n                          onChange={actualizarState}\n                          value={cliente.empresa}\n                    />\n                </div>\n\n                <div className=\"campo\">\n                    <label>Email:</label>\n                    <input type=\"email\" \n                            placeholder=\"Email Cliente\" \n                            name=\"email\" \n                            onChange={actualizarState}\n                            value={cliente.email}\n                    />\n                </div>\n\n                <div className=\"campo\">\n                    <label>Teléfono:</label>\n                    <input type=\"tel\" \n                        placeholder=\"Teléfono Cliente\" \n                        name=\"telefono\" \n                        onChange={actualizarState}\n                        value={cliente.telefono}\n                    />\n                </div>\n\n                <div className=\"enviar\">\n                    <input \n                        type=\"submit\" \n                        className=\"btn btn-azul\" \n                        value=\"Guardar Cambios\" \n                        disabled={ validarCliente() }\n                    />\n                </div>\n            </form>\n        </Fragment>\n    )\n}\n\n// HOC, es una función que toma un componente y retorna un nuevo componente\nexport default  withRouter(EditarCliente);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\laragon\\\\www\\\\restapis_crm_frontend-master\\\\src\\\\componentes\\\\clientes\\\\NuevoCliente.js\";\nimport React, { Fragment, useState, useContext } from 'react';\nimport Swal from 'sweetalert2';\nimport { withRouter } from 'react-router-dom';\nimport clienteAxios from '../../config/axios'; // import el Context\n\nimport { CRMContext } from '../../context/CRMContext';\n\nfunction NuevoCliente(_ref) {\n  var history = _ref.history;\n\n  // utilizar valores del context\n  var _useContext = useContext(CRMContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      auth = _useContext2[0],\n      guardarAuth = _useContext2[1]; // cliente = state, guardarcliente = funcion para guardar el state\n\n\n  var _useState = useState({\n    nombre: '',\n    apellido: '',\n    empresa: '',\n    email: '',\n    telefono: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cliente = _useState2[0],\n      guardarCliente = _useState2[1]; // leer los datos del formulario\n\n\n  var actualizarState = function actualizarState(e) {\n    // Almacenar lo que el usuario escribe en el state\n    guardarCliente(_objectSpread({}, cliente, _defineProperty({}, e.target.name, e.target.value)));\n  }; // Añade en la REST API un cliente nuevo\n\n\n  var agregarCliente = function agregarCliente(e) {\n    e.preventDefault(); // enviar petición\n\n    clienteAxios.post('/clientes', cliente).then(function (res) {\n      // validar si hay errores de mongo \n      if (res.data.code === 11000) {\n        Swal.fire({\n          type: 'error',\n          title: 'Hubo un error',\n          text: 'Ese cliente ya esta registrado'\n        });\n      } else {\n        Swal.fire('Se agregó el Cliente', res.data.mensaje, 'success');\n      } // Redireccionar\n\n\n      history.push('/');\n    });\n  }; // Validar el formulario\n\n\n  var validarCliente = function validarCliente() {\n    // Destructuring\n    var nombre = cliente.nombre,\n        apellido = cliente.apellido,\n        email = cliente.email,\n        empresa = cliente.empresa,\n        telefono = cliente.telefono; // revisar que las propiedades del state tengan contenido\n\n    var valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length; // return true o false\n\n    return valido;\n  }; // verificar si el usuario esta autenticado o no\n\n\n  if (!auth.auth && localStorage.getItem('token') === auth.token) {\n    history.push('/iniciar-sesion');\n  }\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 81\n    },\n    __self: this\n  }, \"Nuevo Cliente\"), React.createElement(\"form\", {\n    onSubmit: agregarCliente,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Llena todos los campos\"), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Nombre:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Nombre Cliente\",\n    name: \"nombre\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 97\n    },\n    __self: this\n  }, \"Apellido:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Apellido Cliente\",\n    name: \"apellido\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Empresa:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Empresa Cliente\",\n    name: \"empresa\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 114\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }, \"Email:\"), React.createElement(\"input\", {\n    type: \"email\",\n    placeholder: \"Email Cliente\",\n    name: \"email\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124\n    },\n    __self: this\n  }, \"Tel\\xE9fono:\"), React.createElement(\"input\", {\n    type: \"tel\",\n    placeholder: \"Tel\\xE9fono Cliente\",\n    name: \"telefono\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"enviar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-azul\",\n    value: \"Agregar Cliente\",\n    disabled: validarCliente(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133\n    },\n    __self: this\n  }))));\n} // HOC, es una función que toma un componente y retorna un nuevo componente\n\n\nexport default withRouter(NuevoCliente);","map":{"version":3,"sources":["C:\\laragon\\www\\restapis_crm_frontend-master\\src\\componentes\\clientes\\NuevoCliente.js"],"names":["React","Fragment","useState","useContext","Swal","withRouter","clienteAxios","CRMContext","NuevoCliente","history","auth","guardarAuth","nombre","apellido","empresa","email","telefono","cliente","guardarCliente","actualizarState","e","target","name","value","agregarCliente","preventDefault","post","then","res","data","code","fire","type","title","text","mensaje","push","validarCliente","valido","length","localStorage","getItem","token"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useContext} from 'react';\nimport Swal from 'sweetalert2';\nimport { withRouter } from 'react-router-dom'; \nimport clienteAxios from '../../config/axios';\n\n// import el Context\nimport { CRMContext } from '../../context/CRMContext';\n\nfunction NuevoCliente({history}){\n\n    // utilizar valores del context\n    const [auth, guardarAuth ] = useContext( CRMContext );\n\n    // cliente = state, guardarcliente = funcion para guardar el state\n    const[cliente, guardarCliente] = useState({\n        nombre: '',\n        apellido: '',\n        empresa : '',\n        email: '',\n        telefono :''\n    });\n\n    // leer los datos del formulario\n    const actualizarState = e => {\n        // Almacenar lo que el usuario escribe en el state\n        guardarCliente({\n            // obtener una copia del state actual\n            ...cliente, \n            [e.target.name] : e.target.value\n        })\n\n    }\n\n    // Añade en la REST API un cliente nuevo\n    const agregarCliente = e => {\n        e.preventDefault();\n\n        // enviar petición\n        clienteAxios.post('/clientes', cliente)\n            .then(res => {\n                // validar si hay errores de mongo \n                if(res.data.code === 11000) {\n                    Swal.fire({\n                        type: 'error',\n                        title: 'Hubo un error',\n                        text: 'Ese cliente ya esta registrado'\n                    })\n                } else {\n                    Swal.fire(\n                        'Se agregó el Cliente',\n                        res.data.mensaje,\n                        'success'\n                    )\n                }\n                // Redireccionar\n                history.push('/');\n            });\n    }\n\n    // Validar el formulario\n    const validarCliente = () => {\n        // Destructuring\n        const { nombre, apellido, email, empresa, telefono} = cliente;\n\n        // revisar que las propiedades del state tengan contenido\n        let valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length;\n\n        // return true o false\n        return valido;\n    }\n\n    // verificar si el usuario esta autenticado o no\n    if(!auth.auth && (localStorage.getItem('token') === auth.token ) ) {\n        history.push('/iniciar-sesion');\n    }\n\n    return (\n\n\n        <Fragment>\n            <h2>Nuevo Cliente</h2>\n            \n            <form\n                onSubmit={agregarCliente}\n            >\n                <legend>Llena todos los campos</legend>\n                <div className=\"campo\">\n                    <label>Nombre:</label>\n                    <input  type=\"text\" \n                            placeholder=\"Nombre Cliente\" \n                            name=\"nombre\"\n                            onChange={actualizarState}\n                    />\n                </div>\n\n                <div className=\"campo\">\n                    <label>Apellido:</label>\n                    <input type=\"text\" \n                          placeholder=\"Apellido Cliente\" \n                          name=\"apellido\" \n                          onChange={actualizarState}\n                    />\n                </div>\n            \n                <div className=\"campo\">\n                    <label>Empresa:</label>\n                    <input type=\"text\" \n                          placeholder=\"Empresa Cliente\" \n                          name=\"empresa\" \n                          onChange={actualizarState}\n                    />\n                </div>\n\n                <div className=\"campo\">\n                    <label>Email:</label>\n                    <input type=\"email\" \n                            placeholder=\"Email Cliente\" \n                            name=\"email\" \n                            onChange={actualizarState}\n                    />\n                </div>\n\n                <div className=\"campo\">\n                    <label>Teléfono:</label>\n                    <input type=\"tel\" \n                        placeholder=\"Teléfono Cliente\" \n                        name=\"telefono\" \n                        onChange={actualizarState}\n                    />\n                </div>\n\n                <div className=\"enviar\">\n                    <input \n                        type=\"submit\" \n                        className=\"btn btn-azul\" \n                        value=\"Agregar Cliente\" \n                        disabled={ validarCliente() }\n                    />\n                </div>\n            </form>\n        </Fragment>\n    )\n}\n\n// HOC, es una función que toma un componente y retorna un nuevo componente\nexport default  withRouter(NuevoCliente);"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _defineProperty from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\src\\\\componentes\\\\Ticket\\\\NuevoTicket.js\";\nimport React, { Fragment, useState, useContext } from 'react';\nimport Swal from 'sweetalert2';\nimport { withRouter } from 'react-router-dom';\nimport clienteAxios from '../../config/axios'; // import el Context\n\nimport { CRMContext } from '../../context/CRMContext';\n\nfunction NuevoTicket(_ref) {\n  var history = _ref.history;\n\n  // utilizar valores del context\n  var _useContext = useContext(CRMContext),\n      _useContext2 = _slicedToArray(_useContext, 2),\n      auth = _useContext2[0],\n      guardarAuth = _useContext2[1]; // cliente = state, guardarcliente = funcion para guardar el state\n\n\n  var _useState = useState({\n    nombre: '',\n    apellido: '',\n    empresa: '',\n    email: '',\n    telefono: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cliente = _useState2[0],\n      guardarCliente = _useState2[1]; // leer los datos del formulario\n\n\n  var actualizarState = function actualizarState(e) {\n    // Almacenar lo que el usuario escribe en el state\n    guardarCliente(_objectSpread({}, cliente, _defineProperty({}, e.target.name, e.target.value)));\n  }; // Añade en la REST API un cliente nuevo\n\n\n  var agregarCliente = function agregarCliente(e) {\n    e.preventDefault(); // enviar petición\n\n    clienteAxios.post('/clientes', cliente).then(function (res) {\n      // validar si hay errores de mongo \n      if (res.data.code === 11000) {\n        Swal.fire({\n          type: 'error',\n          title: 'Hubo un error',\n          text: 'Ese cliente ya esta registrado'\n        });\n      } else {\n        Swal.fire('Se agregó el Cliente', res.data.mensaje, 'success');\n      } // Redireccionar\n\n\n      history.push('/');\n    });\n  }; // Validar el formulario\n\n\n  var validarCliente = function validarCliente() {\n    // Destructuring\n    var nombre = cliente.nombre,\n        apellido = cliente.apellido,\n        email = cliente.email,\n        empresa = cliente.empresa,\n        telefono = cliente.telefono; // revisar que las propiedades del state tengan contenido\n\n    var valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length; // return true o false\n\n    return valido;\n  }; // verificar si el usuario esta autenticado o no\n\n\n  if (!auth.auth && localStorage.getItem('token') === auth.token) {\n    history.push('/iniciar-sesion');\n  }\n\n  var _useState3 = useState(\"dumpling\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      foodState = _useState4[0],\n      setFoodState = _useState4[1];\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83\n    },\n    __self: this\n  }, \"Nuevo Ticket\"), React.createElement(\"form\", {\n    onSubmit: agregarCliente,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 85\n    },\n    __self: this\n  }, React.createElement(\"legend\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }, \"Llena todos los campos\"), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90\n    },\n    __self: this\n  }, \"Subject:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Subject\",\n    name: \"Subject\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 91\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }, \"Description:\"), React.createElement(\"input\", {\n    type: \"text\",\n    placeholder: \"Description\",\n    name: \"Description\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"date start:\"), React.createElement(\"input\", {\n    type: \"date\",\n    placeholder: \"Empresa Cliente\",\n    name: \"start\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 109\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 117\n    },\n    __self: this\n  }, \"date end:\"), React.createElement(\"input\", {\n    type: \"date\",\n    placeholder: \"Email Cliente\",\n    name: \"dateend\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 118\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126\n    },\n    __self: this\n  }, \"Usuario:\"), React.createElement(\"input\", {\n    type: \"tel\",\n    placeholder: \"Tel\\xE9fono Cliente\",\n    name: \"telefono\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 127\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"container p-5\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 134\n    },\n    __self: this\n  }, React.createElement(\"select\", {\n    className: \"custom-select\",\n    value: foodState,\n    onChange: function onChange(e) {\n      var selectedFood = e.target.value;\n      setFoodState(selectedFood);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 135\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"1\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143\n    },\n    __self: this\n  }, \"Steak\"), React.createElement(\"option\", {\n    value: \"2\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144\n    },\n    __self: this\n  }, \"Sandwich\"), React.createElement(\"option\", {\n    value: \"3\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145\n    },\n    __self: this\n  }, \"Dumpling\")), foodState), React.createElement(\"div\", {\n    className: \"enviar\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 152\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"submit\",\n    className: \"btn btn-azul\",\n    value: \"Agregar Cliente\",\n    disabled: validarCliente(),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 153\n    },\n    __self: this\n  }))));\n} // HOC, es una función que toma un componente y retorna un nuevo componente\n\n\nexport default withRouter(NuevoTicket);","map":{"version":3,"sources":["C:\\laragon\\www\\frontend_Ticket\\src\\componentes\\Ticket\\NuevoTicket.js"],"names":["React","Fragment","useState","useContext","Swal","withRouter","clienteAxios","CRMContext","NuevoTicket","history","auth","guardarAuth","nombre","apellido","empresa","email","telefono","cliente","guardarCliente","actualizarState","e","target","name","value","agregarCliente","preventDefault","post","then","res","data","code","fire","type","title","text","mensaje","push","validarCliente","valido","length","localStorage","getItem","token","foodState","setFoodState","selectedFood"],"mappings":"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","sourcesContent":["import React, {Fragment, useState, useContext} from 'react';\r\nimport Swal from 'sweetalert2';\r\nimport { withRouter } from 'react-router-dom'; \r\nimport clienteAxios from '../../config/axios';\r\n\r\n// import el Context\r\nimport { CRMContext } from '../../context/CRMContext';\r\n\r\nfunction NuevoTicket({history}){\r\n\r\n    // utilizar valores del context\r\n    const [auth, guardarAuth ] = useContext( CRMContext );\r\n\r\n    // cliente = state, guardarcliente = funcion para guardar el state\r\n    const[cliente, guardarCliente] = useState({\r\n        nombre: '',\r\n        apellido: '',\r\n        empresa : '',\r\n        email: '',\r\n        telefono :''\r\n    });\r\n\r\n    // leer los datos del formulario\r\n    const actualizarState = e => {\r\n        // Almacenar lo que el usuario escribe en el state\r\n        guardarCliente({\r\n            // obtener una copia del state actual\r\n            ...cliente, \r\n            [e.target.name] : e.target.value\r\n        })\r\n\r\n    }\r\n\r\n    // Añade en la REST API un cliente nuevo\r\n    const agregarCliente = e => {\r\n        e.preventDefault();\r\n\r\n        // enviar petición\r\n        clienteAxios.post('/clientes', cliente)\r\n            .then(res => {\r\n                // validar si hay errores de mongo \r\n                if(res.data.code === 11000) {\r\n                    Swal.fire({\r\n                        type: 'error',\r\n                        title: 'Hubo un error',\r\n                        text: 'Ese cliente ya esta registrado'\r\n                    })\r\n                } else {\r\n                    Swal.fire(\r\n                        'Se agregó el Cliente',\r\n                        res.data.mensaje,\r\n                        'success'\r\n                    )\r\n                }\r\n                // Redireccionar\r\n                history.push('/');\r\n            });\r\n    }\r\n\r\n    // Validar el formulario\r\n    const validarCliente = () => {\r\n        // Destructuring\r\n        const { nombre, apellido, email, empresa, telefono} = cliente;\r\n\r\n        // revisar que las propiedades del state tengan contenido\r\n        let valido = !nombre.length || !apellido.length || !email.length || !empresa.length || !telefono.length;\r\n\r\n        // return true o false\r\n        return valido;\r\n    }\r\n\r\n    // verificar si el usuario esta autenticado o no\r\n    if(!auth.auth && (localStorage.getItem('token') === auth.token ) ) {\r\n        history.push('/iniciar-sesion');\r\n    }\r\n\r\n    const [foodState, setFoodState] = useState(\"dumpling\");\r\n\r\n    return (\r\n\r\n\r\n        <Fragment>\r\n            <h2>Nuevo Ticket</h2>\r\n            \r\n            <form\r\n                onSubmit={agregarCliente}\r\n            >\r\n                <legend>Llena todos los campos</legend>\r\n                <div className=\"campo\">\r\n                    <label>Subject:</label>\r\n                    <input  type=\"text\" \r\n                            placeholder=\"Subject\" \r\n                            name=\"Subject\"\r\n                            onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Description:</label>\r\n                    <input type=\"text\" \r\n                          placeholder=\"Description\" \r\n                          name=\"Description\" \r\n                          onChange={actualizarState}\r\n                    />\r\n                </div>\r\n            \r\n                <div className=\"campo\">\r\n                    <label>date start:</label>\r\n                    <input type=\"date\" \r\n                          placeholder=\"Empresa Cliente\" \r\n                          name=\"start\" \r\n                          onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>date end:</label>\r\n                    <input type=\"date\" \r\n                            placeholder=\"Email Cliente\" \r\n                            name=\"dateend\" \r\n                            onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"campo\">\r\n                    <label>Usuario:</label>\r\n                    <input type=\"tel\" \r\n                        placeholder=\"Teléfono Cliente\" \r\n                        name=\"telefono\" \r\n                        onChange={actualizarState}\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"container p-5\">\r\n                    <select\r\n                        className=\"custom-select\"\r\n                        value={foodState}\r\n                        onChange={(e) => {\r\n                        const selectedFood = e.target.value;\r\n                        setFoodState(selectedFood);\r\n                        }}\r\n                    >\r\n                        <option value=\"1\">Steak</option>\r\n                        <option value=\"2\">Sandwich</option>\r\n                        <option value=\"3\">Dumpling</option>\r\n                    </select>\r\n                    {foodState}\r\n                </div>\r\n\r\n\r\n\r\n                <div className=\"enviar\">\r\n                    <input \r\n                        type=\"submit\" \r\n                        className=\"btn btn-azul\" \r\n                        value=\"Agregar Cliente\" \r\n                        disabled={ validarCliente() }\r\n                    />\r\n                </div>\r\n            </form>\r\n        </Fragment>\r\n    )\r\n}\r\n\r\n// HOC, es una función que toma un componente y retorna un nuevo componente\r\nexport default  withRouter(NuevoTicket);"]},"metadata":{},"sourceType":"module"}
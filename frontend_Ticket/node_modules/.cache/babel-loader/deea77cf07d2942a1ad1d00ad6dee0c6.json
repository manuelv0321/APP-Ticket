{"ast":null,"code":"import _defineProperty from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"C:\\\\laragon\\\\www\\\\frontend_Ticket\\\\src\\\\componentes\\\\Ticket\\\\Report.js\";\nimport React, { useEffect, useState, useContext, Fragment } from 'react';\nimport { Link, withRouter } from 'react-router-dom';\n\nfunction Report() {\n  var _useState = useState({\n    start: '',\n    dateend: ''\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cliente = _useState2[0],\n      guardarCliente = _useState2[1];\n\n  var _useState3 = useState(0),\n      _useState4 = _slicedToArray(_useState3, 2),\n      user = _useState4[0],\n      setuser = _useState4[1];\n\n  var actualizarState = function actualizarState(e) {\n    // Almacenar lo que el usuario escribe en el state\n    guardarCliente(_objectSpread({}, cliente, _defineProperty({}, e.target.name, e.target.value)));\n  }; // Añade en la REST API un cliente nuevo\n\n\n  var agregarCliente = function agregarCliente(e) {\n    e.preventDefault();\n    /*  var Ticket = {};\r\n      Ticket.cliente =cliente;\r\n      Ticket.Usuarios = users; \r\n      // enviar petición\r\n      clienteAxios.post('/Tickets', Ticket,{\r\n          headers: {\r\n              Authorization : `Bearer ${localStorage.getItem('token')}`\r\n          }\r\n      })\r\n          .then(res => {\r\n              // validar si hay errores de mongo \r\n              if(res.data ==='No Autenticado, no hay JWT') {\r\n                  Swal.fire({\r\n                      type: 'error',\r\n                      title: 'Hubo un error',\r\n                      text: 'Token expirado o no existe'\r\n                  })\r\n                  history.push('/iniciar-sesion');\r\n              } else {\r\n                  Swal.fire(\r\n                      'Se agregó el Cliente',\r\n                      res.data.mensaje,\r\n                      'success'\r\n                  )\r\n              }\r\n              // Redireccionar\r\n              history.push('/');\r\n          });*/\n  };\n\n  return React.createElement(Fragment, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61\n    },\n    __self: this\n  }, React.createElement(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63\n    },\n    __self: this\n  }, \"Report\"), React.createElement(\"form\", {\n    onSubmit: agregarCliente,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65\n    },\n    __self: this\n  }, React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 69\n    },\n    __self: this\n  }, \"date start:\"), React.createElement(\"input\", {\n    type: \"date\",\n    placeholder: \"Empresa Cliente\",\n    name: \"start\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70\n    },\n    __self: this\n  })), React.createElement(\"div\", {\n    className: \"campo\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }, \"date end:\"), React.createElement(\"input\", {\n    type: \"date\",\n    placeholder: \"Email Cliente\",\n    name: \"dateend\",\n    onChange: actualizarState,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  })), React.createElement(\"label\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 86\n    },\n    __self: this\n  }, \"Estadi:\"), React.createElement(\"select\", {\n    className: \"campo\",\n    name: \"user\",\n    value: user,\n    onChange: function onChange(e) {\n      var user = e.target.value;\n      setuser(user);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(\"option\", {\n    value: \"0\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 96\n    },\n    __self: this\n  }, \"Seleccionar\"))));\n}\n\nexport default withRouter(Report);","map":{"version":3,"sources":["C:\\laragon\\www\\frontend_Ticket\\src\\componentes\\Ticket\\Report.js"],"names":["React","useEffect","useState","useContext","Fragment","Link","withRouter","Report","start","dateend","cliente","guardarCliente","user","setuser","actualizarState","e","target","name","value","agregarCliente","preventDefault"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,EAAiDC,QAAjD,QAAiE,OAAjE;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,kBAAjC;;AAEA,SAASC,MAAT,GAAkB;AAAA,kBAEmBL,QAAQ,CAAC;AACtCM,IAAAA,KAAK,EAAG,EAD8B;AAEtCC,IAAAA,OAAO,EAAE;AAF6B,GAAD,CAF3B;AAAA;AAAA,MAERC,OAFQ;AAAA,MAECC,cAFD;;AAAA,mBAOUT,QAAQ,CAAC,CAAD,CAPlB;AAAA;AAAA,MAOPU,IAPO;AAAA,MAODC,OAPC;;AASd,MAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,CAAC,EAAI;AACzB;AACAJ,IAAAA,cAAc,mBAEPD,OAFO,sBAGTK,CAAC,CAACC,MAAF,CAASC,IAHA,EAGQF,CAAC,CAACC,MAAF,CAASE,KAHjB,GAAd;AAMH,GARD,CATc,CAmBV;;;AACA,MAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAJ,CAAC,EAAI;AACxBA,IAAAA,CAAC,CAACK,cAAF;AAGF;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA4BD,GAhCD;;AAoCJ,SACI,oBAAC,QAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,EAII;AACI,IAAA,QAAQ,EAAED,cADd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAGI;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBADR,EAEQ;AAAO,IAAA,IAAI,EAAC,MAAZ;AACI,IAAA,WAAW,EAAC,iBADhB;AAEI,IAAA,IAAI,EAAC,OAFT;AAGI,IAAA,QAAQ,EAAEL,eAHd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFR,CAHJ,EAYQ;AAAK,IAAA,SAAS,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADJ,EAEI;AAAO,IAAA,IAAI,EAAC,MAAZ;AACQ,IAAA,WAAW,EAAC,eADpB;AAEQ,IAAA,IAAI,EAAC,SAFb;AAGQ,IAAA,QAAQ,EAAEA,eAHlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ,CAZR,EAqBQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eArBR,EAsBQ;AACI,IAAA,SAAS,EAAC,OADd;AAEI,IAAA,IAAI,EAAC,MAFT;AAGI,IAAA,KAAK,EAAEF,IAHX;AAII,IAAA,QAAQ,EAAE,kBAACG,CAAD,EAAO;AACjB,UAAMH,IAAI,GAAGG,CAAC,CAACC,MAAF,CAASE,KAAtB;AACAL,MAAAA,OAAO,CAACD,IAAD,CAAP;AACC,KAPL;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KASC;AAAQ,IAAA,KAAK,EAAC,GAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBATD,CAtBR,CAJJ,CADJ;AA6CH;;AAED,eAAeN,UAAU,CAACC,MAAD,CAAzB","sourcesContent":["import React, { useEffect, useState, useContext, Fragment } from 'react';\r\nimport { Link, withRouter } from 'react-router-dom';\r\n\r\nfunction Report() {\r\n\r\n    const[cliente, guardarCliente] = useState({      \r\n        start : '',\r\n        dateend: ''\r\n    });\r\n\r\n    const [user, setuser] = useState(0);\r\n\r\n    const actualizarState = e => {\r\n        // Almacenar lo que el usuario escribe en el state\r\n        guardarCliente({\r\n            // obtener una copia del state actual\r\n            ...cliente, \r\n            [e.target.name] : e.target.value\r\n        })\r\n\r\n    }\r\n\r\n        // Añade en la REST API un cliente nuevo\r\n        const agregarCliente = e => {\r\n            e.preventDefault();\r\n    \r\n    \r\n          /*  var Ticket = {};\r\n            Ticket.cliente =cliente;\r\n            Ticket.Usuarios = users; \r\n            // enviar petición\r\n            clienteAxios.post('/Tickets', Ticket,{\r\n                headers: {\r\n                    Authorization : `Bearer ${localStorage.getItem('token')}`\r\n                }\r\n            })\r\n                .then(res => {\r\n                    // validar si hay errores de mongo \r\n                    if(res.data ==='No Autenticado, no hay JWT') {\r\n                        Swal.fire({\r\n                            type: 'error',\r\n                            title: 'Hubo un error',\r\n                            text: 'Token expirado o no existe'\r\n                        })\r\n                        history.push('/iniciar-sesion');\r\n                    } else {\r\n                        Swal.fire(\r\n                            'Se agregó el Cliente',\r\n                            res.data.mensaje,\r\n                            'success'\r\n                        )\r\n                    }\r\n                    // Redireccionar\r\n                    history.push('/');\r\n                });*/\r\n        }\r\n    \r\n\r\n\r\n    return (\r\n        <Fragment>\r\n\r\n            <h2>Report</h2>\r\n\r\n            <form\r\n                onSubmit={agregarCliente}\r\n            >\r\n                <div className=\"campo\">\r\n                        <label>date start:</label>\r\n                        <input type=\"date\" \r\n                            placeholder=\"Empresa Cliente\" \r\n                            name=\"start\" \r\n                            onChange={actualizarState}\r\n                        />\r\n                    </div>\r\n\r\n                    <div className=\"campo\">\r\n                        <label>date end:</label>\r\n                        <input type=\"date\" \r\n                                placeholder=\"Email Cliente\" \r\n                                name=\"dateend\" \r\n                                onChange={actualizarState}\r\n                        />\r\n                    </div>\r\n\r\n                    <label>Estadi:</label>\r\n                    <select\r\n                        className=\"campo\"\r\n                        name=\"user\"\r\n                        value={user}\r\n                        onChange={(e) => {\r\n                        const user = e.target.value;\r\n                        setuser(user);\r\n                        }}\r\n                    >\r\n                     <option value=\"0\">Seleccionar</option>   \r\n                    </select>\r\n\r\n            </form>\r\n\r\n        </Fragment>\r\n       \r\n     )\r\n\r\n}\r\n\r\nexport default withRouter(Report);"]},"metadata":{},"sourceType":"module"}